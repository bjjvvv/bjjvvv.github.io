{"pages":[{"title":"Categories","text":"","link":"/categories/index.html"},{"title":"Tags","text":"","link":"/tags/index.html"},{"title":"About","text":"","link":"/about/index.html"}],"posts":[{"title":"Python 函数的参数规则","text":"位置参数12def fun(a): pass 任意多的位置参数123def fun(*args): passfun(1, '2', 3.4) # 调用 args 会被映射成一个tuple，可以使用 *args 进行解包 默认参数12def fun(a, defalut=1): pass 默认参数必须出现在位置参数后，否则报错 SyntaxError可以用以下三种方式调用：123fun(1)fun(1, 2)fun(1, default=2) 关键字参数1234def fun(*, kw=1): # 1 passdef fun(*args, kw=1): # 2 pass 这两种方式可以定义关键字参数，即在 * 后定义参数，这样的参数就不再是默认参数了也可以不带默认值：12def fun(*, kw): pass 它只能以下面这钟方式调用：1fun(kw=1) 如果像下面这样：1234def fun(*, kw=1): pass fun(2) 则会报错 TypeError: fun() takes 0 positional arguments but 1 was given或者这样：1234def fun(*, kw): passfun() 则会报错 TypeError: kwfun() missing 1 required keyword-only argument: ‘kw’ 任意多的关键字参数12def fun(**kwargs): pass kwargs会被映射成dict，可以使用 **kwargs 进行解包 参数顺序位置参数 &lt; 默认参数 &lt; 任意多位置参数 &lt; 关键字参数 &lt; 任意多关键字参数注意有默认参数的关键字参数要在无默认参数的后面","link":"/2015-10-13-python-function-args-rule/"},{"title":"Vim 文件快速定位","text":":find 命令在 vim 的 path 路径中搜索并打开文件使用方式 :find {file}，可以用 tab 进行补全Linux 中 vim 默认 path 1path=.,/usr/include,, 即会在当前文件所在目录，/usr/include目录以及当前目录（vim中cd指定，pwd显示的目录）中搜索。可以用 :set path+={dir} 添加至搜索路径。因为不能递归搜索，所以即使当前目录为项目路径，也不能对所有文件进行搜索。 解决办法：在 .vimrc 中修改为： 1path=.,/usr/include,** ** 为 vim 中的提供的功能，可以对路径递归搜索，详细见 :h *app/** 表示为对 app/ 下所有路径进行搜索。因为空缺代表当前目录，所以 **就是对当前目录进行递归搜索。","link":"/2015-10-14-vim-quick-locates-file/"}],"tags":[{"name":"python","slug":"python","link":"/tags/python/"},{"name":"vim","slug":"vim","link":"/tags/vim/"}],"categories":[]}